import { promises } from 'node:fs';
import MagicString from 'magic-string';
import { addServerTemplate } from './_utils';
import { pascalCase } from '@whoj/utils-core';
import { createFilter } from '@rollup/pluginutils';
import type { BoxSdkOptions } from '#nuxt/box-sdk/types';
import { BoxClient } from 'box-typescript-sdk-gen/lib/client.generated.js';
import { addTemplate, addTypeTemplate, resolvePath, useNuxt } from '@nuxt/kit';

export function createClientClass(resolve: (...p: string[]) => string, { include, exclude }: BoxSdkOptions['managers'] = {}, nuxt = useNuxt()) {
  const filter = createFilter(include, exclude, { resolve: false });

  const fakeClient = new BoxClient({} as any);

  const _managersAvailable = Object.getOwnPropertyNames(fakeClient)
    .filter(n => !['auth', 'networkSession'].includes(n));
  const managers = _managersAvailable.filter(filter);

  const s = new MagicString(`import { BaseUrls } from 'box-typescript-sdk-gen/lib/networking/baseUrls.generated.js';
import { NetworkSession } from 'box-typescript-sdk-gen/lib/networking/network.generated.js';

export class BoxClient {
  constructor(fields) {
    this.networkSession = fields.networkSession ?? new NetworkSession({
      baseUrls: new BaseUrls({}),
    });
    if (fields.auth) {
      this.auth = fields.auth;
    }`);

  for (const manager of managers) {
    s.prepend(`import { ${pascalCase(`${manager}Manager`)} } from 'box-typescript-sdk-gen/lib/managers/${manager}.generated.js';\n`)
      .append(`\n    this.${manager} = new ${pascalCase(`${manager}Manager`)}({\n      auth: this.auth,\n      networkSession: this.networkSession,\n    });\n`);
  }

  s.append('  }\n')
    .append(getInstanceMethods(fakeClient))
    .append('}\n');

  s.trimLines()
    .prepend('// Auto-Generated by \'nuxt-box-typescript-sdk');

  const { dst } = addTemplate({
    filename: 'modules/nuxt-box-typescript-sdk/client.mjs',
    getContents: () => s.toString()
  });

  addServerTemplate({
    filename: '#nuxt/box-sdk/client',
    getContents: () => s.toString()
  });

  addTypeTemplate({
    filename: 'modules/nuxt-box-typescript-sdk/client.d.ts',
    getContents: async () => {
      const dts = await createClientDts(managers, _managersAvailable);

      return dts.prepend('// Auto-Generated by \'nuxt-box-typescript\'\n').toString()
        .split('\n')
        .map((line) => {
          const exc = /import \{ (\w+) \} from '(.*)';/.exec(line);
          if (exc?.length && exc[2].startsWith('./')) {
            line = line.replace(exc[2], `box-typescript-sdk-gen/lib/${exc[2].substring(2)}`);
          }
          if (line.search(/\S|$/) > 4) {
            line = line.substring(line.search(/\S|$/) - 4);
          }

          const replaces: Array<[RegExp, string]> = [
            [/constructor\(fields: .*$/, 'constructor(fields: BoxClientInput<T>);'],
            [/export declare class BoxClient/, 'export declare class BoxClient<T extends Authentication = Authentication>'],
            [/export interface BoxClientInput/, 'export interface BoxClientInput<T extends Authentication = Authentication>'],
            [/readonly auth: Authentication/, 'readonly auth: T'],
            [/\): BoxClient;/, '): BoxClient<T>']
          ];

          for (const [regex, replace] of replaces) {
            if (regex.test(line)) {
              line = line.replace(regex, replace);
              break;
            }
          }

          return line;
        }).join('\n');
    }
  });

  nuxt.options.alias['#nuxt/box-sdk/client'] = dst.replace(/\.mjs$/i, '');
}

function getInstanceMethods(instance: BoxClient) {
  return Object.getOwnPropertyNames(Object.getPrototypeOf(instance))
    .filter(m => 'function' === typeof instance[m] && m !== 'constructor')
    .reduce((code, m) => `${code}    ${instance[m]}\n`, '');
}

async function createClientDts(managers: string[], _managersAvailable: string[]) {
  const filename = await resolvePath('box-typescript-sdk-gen/lib/client.generated.d.ts');

  const dts = new MagicString(await promises.readFile(filename, 'utf8'));

  for (const managerAvailable of _managersAvailable) {
    if (!managers.includes(managerAvailable)) {
      dts.replace(
        new RegExp(`import { ${pascalCase(`${managerAvailable}Manager`)} } from './managers/${managerAvailable}.generated.js';\n`),
        ''
      );
      dts.replace(
        new RegExp(`readonly ${managerAvailable}: ${pascalCase(`${managerAvailable}Manager`)};\n`),
        ''
      );
    }
    else {
      dts.replace(
        new RegExp(`import { ${pascalCase(`${managerAvailable}Manager`)} } from './managers/${managerAvailable}.generated.js';`),
        `import { ${pascalCase(`${managerAvailable}Manager`)} } from 'box-typescript-sdk-gen/lib/managers/${managerAvailable}.generated.js';`
      );
    }
  }

  dts.trimLines().trim();

  return dts;
}
