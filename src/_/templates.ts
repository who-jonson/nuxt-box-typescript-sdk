import type { NuxtServerTemplate } from '@nuxt/schema';
import { addImports, addServerImports, addTemplate, addTypeTemplate, useNuxt } from '@nuxt/kit';

function registerAutoImports(resolve: (...p: string[]) => string, nuxt = useNuxt()) {
  const imports = ['useBoxAuth', 'useBoxClient', 'useBoxAuthConfig'];

  addImports(imports.map(name => ({
    name,
    from: '#nuxt/box-sdk/imports'
  })));

  addServerImports(imports.map(name => ({
    name,
    from: '#nuxt/box-sdk'
  })));
}

export function registerTemplates(resolve: (...p: string[]) => string, nuxt = useNuxt()) {
  const isDev = !!(nuxt.options.dev || nuxt.options._prepare);

  let { dst: importsDst } = addTemplate({
    filename: 'modules/nuxt-box-typescript-sdk/imports.mjs',
    getContents: () => `// Auto-Generated by 'nuxt-box-typescript-sdk'
import { tryUseNuxtApp } from '#app';
import { boxClientConstructor, useBoxAuth, useBoxAuthConfig } from '#nuxt/box-typescript-sdk/utils';

const useBoxClient = boxClientConstructor((client) => {
  const nuxtApp = tryUseNuxtApp();
  if (!nuxtApp) {
    return client;
  }

  return client.withInterceptors([
    {
      beforeRequest(options) {
        nuxtApp.callHook('box:request:before', [options]);
        return options;
      },
      afterRequest(response) {
        nuxtApp.callHook('box:request:after', [response]);
        return response;
      }
    }
  ]);
});

export { useBoxAuth, useBoxClient, useBoxAuthConfig };
`
  });

  importsDst = importsDst.replace(/\.mjs$/i, '');

  addServerTemplate({
    filename: '#nuxt/box-sdk',
    getContents: () => `// Auto-Generated by 'nuxt-box-typescript-sdk'
import { useNitroApp } from '#imports';
import { boxClientConstructor, useBoxAuth, useBoxAuthConfig } from '#nuxt/box-typescript-sdk/utils';

const useBoxClient = boxClientConstructor((client) => {
  const nitroApp = useNitroApp();
  if (!nitroApp) {
    return client;
  }

  return client.withInterceptors([
    {
      beforeRequest(options) {
        nitroApp.hooks.callHook('box:beforeRequest', [options]);
        return options;
      },
      afterRequest(response) {
        nitroApp.hooks.callHook('box:afterRequest', [response]);
        return response;
      }
    }
  ]);
});

export { useBoxAuth, useBoxClient, useBoxAuthConfig };
`
  });

  addTypeTemplate({
    filename: 'modules/nuxt-box-typescript-sdk.d.ts',
    getContents: () => `// Auto-Generated by 'nuxt-box-typescript-sdk'

declare module '#app' {
  interface RuntimeNuxtHooks {
    'box:request:before': import('#nuxt/box-typescript-sdk/utils').RuntimeNuxtHooks['box:request:before'];
    'box:request:after': import('#nuxt/box-typescript-sdk/utils').RuntimeNuxtHooks['box:request:after'];
  }
}

declare module 'nitropack' {
  interface NitroRuntimeHooks {
    'box:beforeRequest': import('#nuxt/box-typescript-sdk/utils').NitroRuntimeHooks['box:beforeRequest'];
    'box:afterRequest': import('#nuxt/box-typescript-sdk/utils').NitroRuntimeHooks['box:afterRequest'];
  }
}

export {};
`
  });

  addTypeTemplate({
    filename: 'modules/nuxt-box-typescript-sdk/imports.d.ts',
    getContents: () => `// Auto-Generated by 'nuxt-box-typescript-sdk'
export { useBoxClient, useBoxAuth, useBoxAuthConfig } from '#nuxt/box-typescript-sdk/utils';

export {};
`
  });

  nuxt.options.alias['#nuxt/box-sdk/imports'] = importsDst;

  registerAutoImports(resolve, nuxt);

  nuxt.hook('prepare:types', ({ tsConfig }) => {
    if (isDev) {
      tsConfig.compilerOptions.paths['#nuxt/box-sdk'] = [importsDst];
    }
  });

  nuxt.hook('nitro:config', (nitroConfig) => {
    if (isDev) {
      nitroConfig.typescript.tsConfig.compilerOptions.paths['#nuxt/box-sdk'] = [importsDst];
    }
  });
}

export function addServerTemplate(template: NuxtServerTemplate) {
  const nuxt = useNuxt();

  nuxt.options.nitro.virtual ||= {};
  nuxt.options.nitro.virtual[template.filename] = template.getContents;

  return template;
}
