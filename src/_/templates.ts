import { addTypeTemplate } from '@nuxt/kit';

export function registerTypeTemplates(proxy: boolean) {
  // const isDev = !!(nuxt.options.dev || nuxt.options._prepare);

  addTypeTemplate({
    filename: 'modules/nuxt-box-typescript-sdk.d.ts',
    getContents: () => `// Auto-Generated by 'nuxt-box-typescript-sdk'
import type { H3Event } from 'h3';
import type { TokenStorage } from 'box-typescript-sdk-gen/lib/box/tokenStorage.generated.js';
import type { AccessToken } from 'box-typescript-sdk-gen/lib/schemas/accessToken.generated.js';
import type { GetAuthorizeUrlOptions } from 'box-typescript-sdk-gen/lib/box/oauth.generated.js';

declare module "nitropack" {
  interface NitroRuntimeHooks {
    "box:login:before": (ctx: { event: H3Event, options?: GetAuthorizeUrlOptions }) => void | Promise<void>;
    "box:login:success": (ctx: { event: H3Event, response: AccessToken }) => void | Promise<void>;
    "box:token:storageKey": (ctx: { event: H3Event, data: { key: string, auth: 'ccg' | 'jwt' | 'oauth' } }) => void | Promise<void>;
  }
}

${!proxy
  ? ''
  : `declare module 'h3' {
  interface H3EventContext {
    $box: {
      resolveTokenStorage(auth?: 'ccg' | 'jwt' | 'oauth'): TokenStorage;
    };
  }
}`}

export {};
`
  });
}
